else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack")
rankall("heart failure")
rankall("heart failure", 2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=0,ncol=0)
# 4.
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart failure", 2)
rankall("heart failure", 1)
rankall("heart failure", best)
rankall("heart failure", "best")
rankall("heart attack", "best")
rankall("pneumonia", "best")
rankall("heart attack", "best")
rankall("heart attack")
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=0,ncol=0)
return(st)
# 4.
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack")
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=0,ncol=0)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
df<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
tapply(mydata,st,hosp)
return(df)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack")
return(df)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=0,ncol=0)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
df<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
return(df)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
return(df)
rankall("heart attack")
rankall("heart attack",1)
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=54,ncol=2)
return(df)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
df<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
return(df)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
df<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
return(df)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
df<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
return(df)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
return(df)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
df <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
df<-return(mydata4$Hospital.Name) }
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
df
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
dp<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
dp<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
dp<-return(mydata4$Hospital.Name) }
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
dp<-return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
dp<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
dp<-return(mydata4$Hospital.Name) }
}
return(dp)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
dp<-return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
dp<-return(mydata4$Hospital.Name) }
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
}
tapply(mydata, st, hosp)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
}
tapply(mydata$output, st, hosp)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
rankall <- function(outcome, num = "best") {
# 1. load data and produce a data.frame with useful columns
data <- read.csv("outcome-of-care-measures.csv", sep=",",
na.strings="Not Available", stringsAsFactors=FALSE)
mydata <- data[,c(2,7,11,17,23)]
colnames(mydata) <- c("Hospital.Name","State","heart attack" ,
"heart failure","pneumonia")
# 2. Check whether outcome is valid
validout<- outcome %in% c("pneumonia","heart attack", "heart failure")
if(validout==0){stop("invalid outcome")}
# 3. Creates a factor with levels for every state and a data frame for storing results
st <- as.factor(mydata$State)
dp <- matrix(,nrow=54,ncol=2)
# 4.
hosp <- function(x) {
if (class(num)=="numeric"){ if(num>nrow(mydata)) {return(NA)}
else { mydata4 <-  mydata[order(mydata[,outcome],mydata[,1]),]
return(mydata4$Hospital.Name[num])}}
else if (num=="best") {
mydata4 <- mydata[which.min(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
else if (num=="worst") {
mydata4 <- mydata[which.max(mydata[,outcome]),]
return(mydata4$Hospital.Name) }
}
tapply(mydata$outcome, st, hosp)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart attack",2)
source('C:/Users/Lab.Neurociencias/Desktop/R - WD/Coursera/week4/rankall.R')
source('C:/Users/Lab.Neurociencias/Desktop/R - WD/Coursera/week4/rankall.R')
